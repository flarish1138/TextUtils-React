{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.84d5518a.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        {/* <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n                        </li> */}\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set Title Here',\r\n    aboutText: 'About'\r\n}","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpClick = () => {\r\n        // console.log(\"UpperCase Was Clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to uppercase\", \"success\");\r\n    }\r\n\r\n    const handleLoClick = () => {\r\n        // console.log(\"UpperCase Was Clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"Converted to lowercase\", \"success\");\r\n    }\r\n    const handleClearClick = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        props.showAlert(\"Text was cleared\", \"success\");\r\n    }\r\n\r\n    const handleOnchange = (event) => {\r\n        // console.log(\"On change\");\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById('myBox');\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showAlert(\"Text was successfully copied\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        props.showAlert(\"Extra Space was successfully removed \", \"success\");\r\n    }\r\n\r\n    const [text, setText] = useState('');\r\n    // text = 'new text'; // Wrong way to set the text\r\n    // setText('new text'); //Correct way to set the text \r\n    return (\r\n        <>\r\n            <div className=\"container\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnchange} style={{ backgroundColor: props.mode === 'light' ? 'white' : 'grey', color: props.mode === 'light' ? 'black' : 'white' }} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n                <button className={`btn btn-${props.mode === 'light' ? 'dark' : 'danger'} mx-1`} onClick={handleUpClick}>Convert to UpperCase</button>\r\n                <button className={`btn btn-${props.mode === 'light' ? 'dark' : 'danger'} mx-1`} onClick={handleLoClick}>Convert to LowerCase</button>\r\n                <button className={`btn btn-${props.mode === 'light' ? 'dark' : 'danger'} mx-1`} onClick={handleClearClick}>Clear Text</button>\r\n                <button className={`btn btn-${props.mode === 'light' ? 'dark' : 'danger'} mx-1`} onClick={handleCopy}>Copy Text</button>\r\n                <button className={`btn btn-${props.mode === 'light' ? 'dark' : 'danger'} mx-1`} onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n            </div>\r\n            <div className=\"container my-3\" style={{ color: props.mode === 'light' ? 'black' : 'white' }}>\r\n                <h2>Your text summary</h2>\r\n                <p>{text.split(\" \").length-1} words and {text.length} characters</p>\r\n                <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length > 0 ? text : \"Enter something in the text box above to preview it here\"}</p>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light')// Whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#282828';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Dark Mode';\n      // setInterval(() => {\n      //   document.title = 'TextUtils is amazing';\n      // }, 500);\n      // setInterval(() => {\n      //   document.title = 'Install TextUtils Now';\n      // }, 600);\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title = 'TextUtils - Light Mode';\n    }\n  }\n\n  return (\n    <>\n      {/* <Navbar title='TextUtils' aboutText='About TextUtils' /> */}\n      {/* <Navbar /> */}\n      {/* <Router> */}\n        <Navbar title='TextUtils' mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          {/* <Switch> */}\n            {/* Learning of exact path */}\n            {/* /users -------> Component 1  */}\n            {/* /users/Home --> Component 2  */}\n            {/* <Route exact path=\"/about\">\n              <About />\n            </Route> */}\n            {/* <Route exact path=\"/\"> */}\n              <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode} />\n            {/* </Route> */}\n          {/* </Switch> */}\n        </div>\n      {/* </Router> */}\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}